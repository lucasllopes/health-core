type Doctor {
    id: ID!
    name: String!
    specialty: String!
    crm: String!
}

type Nurse {
    id: ID!
    name: String!
    coren: String!
}

type Patient {
    id: ID!
    name: String!
    dateOfBirth: String
    document: String
    phone: String
    email: String
    address: String
}

type Appointment {
    id: ID!
    patient: Patient
    doctor: Doctor
    nurse: Nurse
    appointmentDate: String!
    status: String!
    notes: String
    createdAt: String!
    updatedAt: String
    medicalRecord: MedicalRecord
}

type MedicalRecord {
    id: ID!
    diagnosis: String
    prescription: String
    observations: String
    createdAt: String!
    updatedAt: String
}

input PageInput {
    page: Int = 0
    size: Int = 3
}

type PageOutput {
    page: Int!
    size: Int!
    totalPages: Int!
    totalElements: Int!
}

type AppointmentPageGraphQL {
    content: [Appointment!]!
    pageInfo: PageOutput!
}

input AppointmentFilter {
    patientDocument: String
    doctorCrm: String
    futureOnly: Boolean
}

input AppointmentInput {
    patientId: ID!
    doctorId: ID!
    nurseId: ID
    appointmentDate: String!
    status: String!
    notes: String
}

input AppointmentUpdateInput {
    nurseId: ID
    appointmentDate: String
    status: String
    notes: String
}

type Query {
    appointmentById(id: ID!): Appointment
    appointments(filter: AppointmentFilter, page: PageInput!): AppointmentPageGraphQL!
    appointmentsByPatient(patientId: ID!): [Appointment]!
    futureAppointmentsByPatient(patientId: ID!): [Appointment]!
}

type Mutation {
    createAppointment(input: AppointmentInput!): Appointment!
    updateAppointment(id: ID!, input: AppointmentUpdateInput!): Appointment!
    disableAppointment(id: ID!): Appointment!
    enableAppointment(id: ID!): Appointment!
    deleteAppointment(id: ID!): Boolean!
}
